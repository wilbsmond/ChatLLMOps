and I'm gonna bring on Mr transitive  himself what's up Travis how you doing dude I'm good Demetrius thank you very much for having me it's a pleasure to be here dude can I just say this in front of everyone I'm going to declare my love for your email oh thank you that you have and I don't know if we want to put you on blast and say it to everyone but let's just say that your email is probably the best that I have ever seen and if anyone is not following you on Twitter I highly recommend that you are such an incredible follow and you do all kinds of Twitter spaces to talk about what's happening in Ai and ml all the time yeah uh something that we're all learning about this space it's so new together and uh just have a good group of people that we like to uh discuss the the latest Weekly News um working with uh Ben's bites uh newsletter as well and make it make it accessible for people That's it man so it's super cool to have you here as you know I'm a fan and now you're on this agent kick I'm gonna give you 10 minutes on the clock uh as if I follow the clock strictly as you know but that's the fun of having big cushion breaks at the end so I can be a little bit more liberal I'll share your screen for you you should be good to go I'll be back in 10 minutes man awesome thank you Demetrius uh yeah so as as Richard said um I am transitive uh otherwise known as Travis Fisher um uh quick quick background on on on me and and uh why I'm chatting about agents today uh it's so I have a strong background in open source and uh the AI space has been um changing exponentially as I'm sure most of you are aware uh when Chachi Boutique released six months ago I released the Chachi Beauty npm package and then uh released this uh Twitter bot chatbot on Twitter uh that has about 130 000 followers now um I also run a uh just a Discord called hackers.com of which has about 10 000 AI developers in that um and uh I've just been building a lot of Open Source uh experiments and and demos uh to really uh maximize my rate of learning around this space and uh more recently I've started to really focus on AI agents and um you know let's let's talk a little bit about uh about that uh so there's been a lot of hype around agents recently um you know Auto GPT as an example in this this GitHub star chart is the uh fastest growing most GitHub star hard repo of all time um which is just just insane I mean a month after uh autogpt uh launched it it had more stars than like soccer kubernetes like somebody's just massive uh traditional um open source projects and you know the the there's a reason why there's there's so much hype around it uh it's it's you know people are are in in raptured by the the possibilities um at the same time right now the the vast majority of these AI agents are actually just toys um so let's let's uh be really clear about what we're talking about um what actually is an agent um I'll be clear there are a few other definitions of Agents coming from a traditional um machine learning and and reinforcement learning they agents are a term that is not super well defined but from within the scope of of this talk uh and the type of agents that that I feel like there are the most promising um I'll Define uh agents are either autonomous or some autonomous programs which in particular use the reasoning abilities of AI models to accomplish tasks so you know currently uh the the AI models that we're talking about are llms and it really only became possible to start viewing these these language models as reasoning engines uh fairly recently uh with with large foundational models like gbt 3.5 and gpt4 really just just exponentially pushing the bar forward in terms of their ability to uh do reasoning and then uh you know certain prompting techniques such as Chain of Thought uh or or self-reflection um just adding even more uh robustness around their ability to actually reason um and you know I I would define an agent as having a couple of key components so you know an agent is you can think of it as uh you give an agent a very very well specified task uh you you give it some resources for accomplishing that task those resources could be things like uh compute time it could be actual Financial money it could be be tools such as access to a third access to your browser access to your user accounts it could be uh you know more more traditional tools like like access apis or or proprietary data um but so you you give an agent a task you give it an agent some resources to accomplish that task uh generally the the implementation of the agent is going to involve some planning or decomposition of the the task into subtasks and when you when you do that there's there's a need to do some scheduling and prioritization around these these subtasks and and ultimately it ends up looking very much uh similar to an orchestration or or scheduling in in like a traditional operating system where you have let's say a lot of threads or a lot of work uh that uh that need to happen and you need to prioritize and actually uh schedule schedule those tasks to be executed um now this can get very comp applicated very quickly oh and there's also the the whole external memory um this would be things like existing databases or vector databases the main difference being that Vector databases are kind of fuzzy and for a lot of of what agents are going to work really well with or where they're where their strengths are going to shine um the the key Advantage is is that you don't need to have as uh specific of rule rule-based and and uh uh exhaustive uh programming that that that makes makes things really explicit they shine in areas where where uh you can be really flexible and that's you know a a reason why Factor databases even though there's a lot of hype there is there is this this flexible aspect to them in terms of their using them for retrieval um so I view agents very much as a spectrum uh I think when when a lot of people say say agents they they jump straight to the right side of this this graph and think about fully self-driving programs um I think of Agents as a spectrum where you start off at the at the very bottom you have uh let's let's think of think of the the large language model as a CPU um or as a reasoning engine and and for the purposes of this talk we can think of them as a black box that and and you know they're they're great at understanding and generating natural language but the thing that's really game changing about more recent llms is their ability to reason and and that's where if you if you start to think about them as as CPUs inside of a a fundamentally new paradigm of compute um and then you can you can ask yourself well what is what is the world of programs look like that are built on top of those those language models as reasoning engines built on top of those CPUs and uh I I viewed those programs as agents um and you know on on the one hand you have very traditional deterministic programming uh you can think of this as programs that are written by a human uh human is definitely driving driving the bus and on the the other hand uh other side of the spectrum you have fully self-driving programs um these are things like Auto GPT or baby AGI uh and the the ideas is you give you give the the fully self-driving agent or fully autonomous agent a task and it just goes off and completely on its own uh accomplishes that task and one of the things that I really want to drive home is that um just like uh just like with with self-driving cars trying to jump straight to self-driving programs is a mistake um it's it's amazing from a marketing perspective it's amazing from a uh the perspective of showing people like like what will be possible soon but you know this is LMS in production we're talking about uh what's possible today and and uh my main point that I I want to make here is uh that that we really want to start kind of more towards the left-hand side of this graph but it's really a spectrum and the question is you know how can we how can we start with more deterministic agents uh and and and and slightly more constrained uh uh uh areas just like we we've done with with self-driving cars there's a spectrum there um and then gradually move towards more self-driving programs over time so some of the key challenges and I'll go through this kind of kind of quickly here uh would be one agents have a tendency the more autonomous you get they tend to get stuck in Loops or or diverge uh away from the original path and and they they don't oftentimes have a good ability to reflect and actually get back on on track um there's something known as a composability gap where even if if uh an agent is really good at solving like one sub problem um the the original problem which is composed of many sub problems uh the the kind of probability or or reliability of of that that overall agent um decreases very very quickly uh another thing is like if you if you just give an agent uh a task and say go off and do this um this becomes a very challenging ux problem so it's not just on the algorithmic side it's not just on the on the the um developer side the ux of actually from a user standpoint understanding what these agents are doing and being able to interpret them and also being able to to keep a human in the loop is is really important and that requires uh really really a lot of work on the ux side another challenge is kind of the latency and cost most of the the current AI uh or agent Frameworks use default to using um you know large foundational hosted models and uh the cost there is something where when you have uh recursive uh calls like that can that can add up really really quickly um and and all uh finally safety is is a Paramount importance um if you're actually giving an agent right access to the world on your behalf uh making sure you keep keep some guardrails on that is super important so I'm just gonna uh uh go through some some advice for for building towards reliable agents uh you know the first first and most important piece of advice is to actually constrain the the types of tasks that you're you're setting out to to accomplish with with agents um anything that is is too generic or or too large I I think you're going to run into uh problems with in in my opinion uh agents are a really good fit today for more of uh uh very repetitive uh uh tasks or robotic process RPA type tasks um tasks that that uh you would want to have be always on in the background working on your behalf um I mean another another uh approach just to constrain the set of tools that you that you use so instead of giving an agent access to to a thousand tools if you know that there's only a couple tools that you need for a given task to constrain it that way um keeping a human in the loop as part of the feedback process this is this is one one area where uh if you compare um agents to kind of traditional workflows uh this is this is an area where um agents can fundamentally improve because they're they're built on top of machine learning models and you can build in some human human feedback loops that improve and learn and and get more uh better at solving the task over over time so this is something that I think is a fundamental key key primitive uh here uh another uh approach is to kind of build up an ecosystem of very reliable Primitives I'll I'll talk about this in a second um wherever possible preferred determinants to code and you might start off with a very generic like let's say gpg4 but uh move towards deterministic code eventually um one one thing I want to say is multi-agent systems are distributed systems and you can there's a lot that we can learn from traditional distributed systems in that context uh one example uh here is a recent paper uh by Nvidia and some researchers um called Voyager that is solving uh uh various Minecraft tasks and and one of the key insights here was that the the AI would generate uh code based skills uh on the Fly and uh evaluate the those those skills as kind of subroutines and and have them uh build up this library of skills over time that that that it could keep keep referencing uh backwards and uh I I'm running out of time here so last thing I want to say um if if you view kind of the the ideal agent as this fully autonomous uh single entity given a single task um I am advocating for uh more of of a kind of scripted agent workflow that breaks up a task into subtasks and and in particular if you think of of of the the uh solution here as as a series of nodes every one of these these nodes is something that you can reason about no matter no matter how how intelligent the underlying language models become um this the ability for for humans to reason about the steps is is fundamental and whether whether this uh graph on the right is uh you know generated um statically or whether it's generated on the fly like I still think it's it's very important to be able to have this level of interpretability because you can also then start to think about well this this graph is is kind of a higher level programming language and we're moving away from like traditional I'm writing python code to I'm writing in in these higher level uh Primitives and in that world we can we can apply lessons from traditional software engineering you know at the the node level of this graph what does a unit test look like what does uh writing an eval to uh maybe start off with with a very maybe a a node starts off with gpd4 it's a very generic model you run you run it a thousand times you get a thousand inputs and outputs you distill that down into a very uh fine grain model these are all lessons that I think we can take from traditional software engineering and apply in this context um and uh anyway I I super quick quick version of this lightning talk but that's that's it on my end so uh yeah awesome dude thank you so much this was incredible as I knew it would be agents are so hot right now and it is so hard to figure out how you can get them to work and you are deep in the trenches I know that I was talking to a friend of mine uh Brian and he was like yeah I tried Auto GPT and all I was left with was a 200 open AI bill and I did not get it working the whole time so yeah it's good to see another friend of mine was like pretty sure AI Twitter is gaslighting me because this never works when I try it I mean there's there's definitely a a lot of hype and a lot of excitement around what will be possible in the future for today I think you want to be more on the the left hand of that Spectrum where you're writing more deterministic code code driven and using llms as as little pieces instead of big pieces of fully autonomous um at least for the time being yeah we're not there yet all right man I gotta kick you off because we're keeping it rolling you just thank you Travis I'll talk to you later man and I'll see you in uh San Francisco maybe if you're yeah yeah I'm over at HF hero uh would would love to uh to meet you when you're when you're out in SF all right sweet talk to you later man yeah yeah [Music]